'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _supportedCountries = ['AU', 'CA', 'FR', 'GB', 'US'];

var normalize = function normalize(countryCode, postalCode) {
	switch (countryCode) {
		case 'CA': // fall-through
		case 'GB':
			return postalCode.trim().split(' ')[0].toUpperCase();
		default:
			return postalCode.trim();
	}
};

var getJsonUrl = function getJsonUrl(countryCode, postalCode) {
	return 'https://storage.googleapis.com/postal-codes/' + countryCode + '/' + normalize(countryCode, postalCode) + '.json';
};

var PostalCodes = function () {
	function PostalCodes(_ref) {
		var XMLHttpRequest = _ref.XMLHttpRequest;
		(0, _classCallCheck3.default)(this, PostalCodes);

		this._XMLHttpRequest = XMLHttpRequest;
	}

	(0, _createClass3.default)(PostalCodes, [{
		key: 'supportedCountries',
		value: function supportedCountries() {
			return (0, _q2.default)({
				countryCodes: _supportedCountries
			});
		}
	}, {
		key: 'area',
		value: function area(_ref2) {
			var countryCode = _ref2.countryCode,
			    postalCode = _ref2.postalCode;

			if ((0, _lodash2.default)(_supportedCountries).includes(countryCode)) {
				var deferred = _q2.default.defer();
				var xhr = new this._XMLHttpRequest();
				xhr.onreadystatechange = function () {
					if (xhr.readyState == 4) {
						if (xhr.status == 200) {
							deferred.resolve(JSON.parse(xhr.responseText));
						} else {
							deferred.reject({
								code: 'invalid_postal_code',
								message: 'invalid postal code for ' + countryCode + ': ' + postalCode
							});
						}
					}
				};

				xhr.open('GET', getJsonUrl(countryCode, postalCode), true);
				xhr.send();

				return deferred.promise;
			} else {
				return _q2.default.reject({
					code: 'invalid_country',
					message: 'invalid country: ' + countryCode
				});
			}
		}
	}]);
	return PostalCodes;
}();

exports.default = PostalCodes;